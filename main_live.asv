clear; clc; clf;
%%

disp("Code Run")

% Option to visualize slices
visualizeSlicesFlag = true;


% Load the slices from files
[trainVolume, labelVolume] = loadNiiFile(...
    'data/imagesTr/liver_80.nii.gz', ...
    'data/labelsTr/liver_80.nii.gz'  ...
);

disp(size(trainVolume))
% Visualize the slices
if visualizeSlicesFlag
    visualizeSlices(trainVolume, labelVolume);
end

%%
%[text] Define the region of interest (ROI) parameters for cross normalization
roiParams.x = 35;
roiParams.y = 38;
roiParams.r = 30;


% Maximum value for uint16
maxValue = 65536;

% ----------- START REFACTOR FOLLOWING CODE ----------- %

% Number of bins for histogram
nBins = 65536; % Number of bins for histogram
[meanValue, normalizedSlice] = normalizingSlices(trainVolume, roiParams, maxValue);
% normalizedSlice =  histogramMachingAllSlice(normalizedSlice_temp, 150);
[hMean, hMean_clean] = histogramOnAllSlices(normalizedSlice, nBins);

% visualizeSlices(normalizedSlice, normalizedSlice_temp)
%%
fprintf('Mean value in ROI: %.2f\n', meanValue);

% Visualize mean histogram of all slices
plotHistograms(hMean, hMean_clean);

% Group histogram data
groupSize = 2000;

[grouped_hMean, grouped_hMean_clean, binCenters] = groupHistogramData(hMean, hMean_clean, groupSize, nBins);
[lowerIntensity, upperIntensity] = bandDetection(grouped_hMean_clean); % 30000 con grouped_hMean_clean | 3000000 con grouped_hMean

plotGroupedHistograms(binCenters, grouped_hMean, grouped_hMean_clean, nBins, lowerIntensity, upperIntensity);
%%
% ------------ STOP REFACTOR FOLLOWING CODE ----------- %
% Stretch the slices using the lower and upper intensity values
stretchedSlice = stretchSlices(normalizedSlice, lowerIntensity, upperIntensity, 8);

dims = size(trainVolume);
nSlice = dims(3);

no_bones_slice = zeros(size(trainVolume,1), size(trainVolume,2), nSlice,'uint16');


   
figure;
imshow(stretchedSlice(:,:,195))
title("Porco caneeeeee");
window = 10
for slice_idx=1:nSlice-window
    
    tempSlice = normalizedSlice(:,:,slice_idx);

    % Remove high value (in this case mainly areas representing the bones)
    for j= 1:window
    mask = stretchedSlice(:,:,slice_idx+j-1) > maxValue * 0.95;
    mask = imdilate(double(mask), strel("disk", 4)); % Dilation to remove small holes
    mask = imerode(mask, strel("disk", 2)); % Erosion to remove small holes
    mask = imfill(mask, "holes"); % Fill holes
    mask = imfilter(mask, fspecial("gaussian", 10)); % Gaussian filter to smooth the mask

    tempSlice = uint16(double(tempSlice) .* double(1 - mask));
    end
   
    no_bones_slice(:,:,slice_idx) = tempSlice;
    figure(10);clf;
    imshow(no_bones_slice(:,:,slice_idx))
    pause(0.001)
end


% Visualizzazione della slice modificata
figure;
imshow(no_bones_slice(:,:,slice_idx));
%%

[hMean_no_bones, hMean_clean_no_bones] = histogramOnAllSlices(no_bones_slice, maxValue);

[grouped_hMean_no_bones, grouped_hMean_clean_no_bones, binCenters] = groupHistogramData(hMean_no_bones, hMean_clean_no_bones, groupSize, nBins);


[lowerIntensity_no_bones, upperIntensity_no_bones] = bandDetection(grouped_hMean_clean_no_bones);

plotGroupedHistograms(binCenters, grouped_hMean_no_bones, grouped_hMean_clean_no_bones, nBins, lowerIntensity_no_bones, upperIntensity_no_bones);


%%
flag = true

doubleStretchedSlice_temp = stretchSlices(no_bones_slice, lowerIntensity_no_bones, upperIntensity_no_bones, 6);

%mask_after_no_bones = doubleStretchedSlice_temp >= lowerIntensity_no_bones*maxValue*0.1 & doubleStretchedSlice_temp <= upperIntensity_no_bones*maxValue*1.1;
%doubleStretchedSlice_temp = doubleStretchedSlice_temp.*mask_after_no_bones
for i=1:217
    figure(12);clf;
    imshow(doubleStretchedSlice_temp(:,:,i));
    pause(0.01)
end
% doubleStretchedSlice_temp(1:150,: ,:) = 0;
%%
for slice_idx=1:nSlice


    % Remove high value (in this case mainly areas representing the bones)
    mask = doubleStretchedSlice_temp(:,:,slice_idx) > maxValue * 0.13;
    

    mask = imdilate(double(mask), strel("disk", 4)); % Dilation to remove small holes
    mask = imerode(mask, strel("disk", 4)); % Erosion to remove small holes
    mask = imfill(mask, "holes"); % Fill holes
    mask_array(:,:,slice_idx) = 1 - imfilter(mask, fspecial("gaussian", 10)); % Gaussian filter to smooth the mask

    % tempSlice = uint16(double(doubleStretchedSlice_temp(:,:,slice_idx)) .* double(1 - mask));
    % doubleStretchedSlice_temp2(:,:,slice_idx) = tempSlice;
    
    figure(1);clf;
    imshow(1 - mask_array(:,:,slice_idx))
    title(slice_idx)

    pause(0.001)
end

%%
doubleStretchedSlice_temp2 = histogramMachingAllSlice(doubleStretchedSlice_temp, 150);
% fino a qua è buono
%%
for slice_idx=1:nSlice
    figure(4483); clf;
    doubleStretchedSlice_final(:,:,slice_idx)= uint16(double(doubleStretchedSlice_temp2(:,:,slice_idx)) .* double(1 - mask_array(:,:,slice_idx)));
    imshow(doubleStretchedSlice_final(:,:,slice_idx))
    pause(0.0001)
end
%%
DoS = 0.04; % Regola questo (Degree of Smoothing)
sSigma = 4;

h = waitbar(0);
for slice_idx=1:nSlice
     waitbar(slice_idx/nSlice, h);
    % tempSlice = uint16(double(doubleStretchedSlice_final(:,:,slice_idx)) .* double(1 - mask_array(:,:,slice_idx)));
    % doubleStretchedSlice(:,:,slice_idx) = kuwahara(tempSlice, 19);
    doubleStretchedSlice(:,:,slice_idx) = imbilatfilt(double(double(doubleStretchedSlice_final(:,:,slice_idx))./maxValue), DoS, sSigma);
end

%%

% imshow(doubleStretchedSlice(:,:,180))

if flag
    for slice_idx=1:nSlice
    
        figure(1); clf;
        subplot(1, 2, 1);
        imshow(doubleStretchedSlice(:,:,slice_idx))
        title(['Label Slice', num2str(slice_idx)]);
    
        subplot(1, 2, 2);
        imshow(doubleStretchedSlice_temp(:,:,slice_idx))
        title(['Label Slice', num2str(slice_idx)]);
        pause(0.0001);
    end
end


%%
%------------- Segmentazione Morfologica --------------%

slice_idx = 156;
slice = doubleStretchedSlice(:,:,slice_idx);
figure;
imshow(slice, []);
title('Disegna una ROI nel fegato');
roi = drawpolygon; % O drawpolygon, drawellipse...
wait(roi); % Attendi che l'utente finisca di disegnare
mask = createMask(roi);
liver_pixels = slice(mask); % Estrai i pixel della ROI
figure;
imhist(liver_pixels);
title('Istogramma della ROI nel fegato');



%%
% --- Soglie identificate dall'analisi ROI ---
% Assumiamo che doubleStretchedSlice sia effettivamente in scala [0, 1]
% Se così non fosse, dovresti riscalare queste soglie.
lowerThreshold = 0.06 %[control:slider:431b]{"position":[18,22]}
upperThreshold = 0.28 %[control:slider:32e1]{"position":[18,22]}

% --- Ottieni dimensioni del volume ---
dims = size(doubleStretchedSlice);
nRows = dims(1);
nCols = dims(2);
nSlice = dims(3); % Numero di slice nel volume

% --- Inizializza il volume della maschera binaria ---
% Usiamo 'logical' per efficienza di memoria e calcolo
initialLiverMask = false(nRows, nCols, nSlice);

disp('Applicazione thresholding slice per slice...');
tic; % Inizia a misurare il tempo

% --- Applica il thresholding a ogni slice ---
for slice_idx = 1:nSlice
    % Estrai la slice corrente (è già di tipo double)
    currentSlice = doubleStretchedSlice(:,:,slice_idx);
    
    % Crea la maschera binaria per la slice corrente:
    % Metti a 'true' (1) i pixel con intensità compresa tra le soglie
    mask_slice = (currentSlice >= lowerThreshold) & (currentSlice <= upperThreshold);

    % mask_slice_erode = imerode(mask_slice, strel("disk", 5));
    % mask_slice_dilate = imdilate(mask_slice_erode, strel("disk", 3));
    
    % Salva la maschera binaria nella posizione corretta del volume 3D
    mask_fill = imfill(mask_slice, 18 ,"holes");
    
    mask_opened = imopen(mask_fill, strel('disk', 5));

    % mask_slice_erode = imerode(mask_fill, strel("disk", 6));
    % mask_slice_dilate = imdilate(mask_slice_erode, strel("disk", 3));
    initialLiverMask(:,:,slice_idx) = mask_opened;
    
    % --- (Opzionale) Visualizzazione per controllo ---q
         figure(300); clf;
         subplot(1,2,1); imshow(currentSlice); title(['Slice Filtrata ', num2str(slice_idx)]);
         subplot(1,2,2); imshow(mask_opened); title('Maschera da Thresholding');
         drawnow; % Forza l'aggiornamento della figura
         pause(0.1); % Pausa opzionale
end

elapsedTime = toc; % Ferma il cronometro
fprintf('Thresholding completato in %.2f secondi.\n', elapsedTime);

% Ora 'initialLiverMask' è un volume 3D binario (logical)
% che rappresenta la prima stima della segmentazione del fegato.

% --- Visualizza un esempio di maschera ottenuta ---
slice_to_show = 180; % La stessa slice usata per la ROI o un'altra

figure;
subplot(1,2,1);
imshow(doubleStretchedSlice(:,:,slice_to_show), []);
title(['Slice Filtrata (Kuwahara) ', num2str(slice_to_show)]);
subplot(1,2,2);
imshow(initialLiverMask(:,:,slice_to_show));
title(['Maschera Iniziale (Thresholding) ', num2str(slice_to_show)]);



%%
% --- Raffinamento Morfologico ---
refinedLiverMask = false(size(initialLiverMask)); % Inizializza maschera finale
minLiverArea = 100; % AREA MINIMA in pixel -> REGOLA QUESTO VALORE!
se_close = strel('disk', 7); % Elemento strutturante per 'imclose' (opzionale)
se_open = strel('disk', 5); % Elemento strutturante per 'imopen' (opzionale)

disp('Inizio raffinamento morfologico...');
tic;
for slice_idx = 1:nSlice
    if mod(slice_idx, 20) == 0
        fprintf('Raffinamento slice %d/%d...\n', slice_idx, nSlice);
    end
    
    binarySlice = initialLiverMask(:,:,slice_idx);
    
    % 1. Riempimento buchi interni
    filledSlice = imfill(binarySlice, 'holes');
    
    % 2. (Opzionale) Chiusura morfologica: Chiude piccoli gap
    closedSlice = imclose(filledSlice, se_close);
    
    % 3. (Opzionale) Apertura morfologica: Rimuove piccole connessioni/oggetti
    openedSlice = imopen(closedSlice, se_open); % Se usi la chiusura
    % openedSlice = imopen(filledSlice, se_open); % Se NON usi la chiusura

    % 4. Rimuovi oggetti piccoli (rumore, vasi, ecc.)
    cleanedSlice = bwareaopen(openedSlice, minLiverArea);
    
    % 5. Tieni solo la componente connessa più grande (solitamente il fegato)
    CC = bwconncomp(cleanedSlice);
    if CC.NumObjects > 0
        stats = regionprops(CC, 'Area');
        [~, idx] = max([stats.Area]); % Indice della componente più grande
        finalSlice = false(size(binarySlice));
        finalSlice(CC.PixelIdxList{idx}) = true; % Crea maschera solo con quella
    else
        finalSlice = false(size(binarySlice)); % Nessun oggetto rimasto
    end
    
    refinedLiverMask(:,:,slice_idx) = finalSlice; % Salva la maschera raffinata
end
toc;
disp('Raffinamento morfologico completato.');

% --- Visualizzazione Finale ---
for slice_to_show=1:nSlice
% slice_to_show = 180;
figure(1); clf;
imshow(doubleStretchedSlice(:,:,slice_to_show), []);
hold on;
% Usa visboundaries per mostrare il contorno della segmentazione
visboundaries(refinedLiverMask(:,:,slice_to_show), 'Color', 'r', 'LineWidth', 1);
hold off;
title(['Segmentazione Finale Fegato (Slice ', num2str(slice_to_show), ')']);
pause(0.01)

% Il volume 'refinedLiverMask' contiene la tua segmentazione finale del fegato.
end

%%
% --- Thresholding Applicato all'Intero Volume 3D ---
% lowerThreshold = 0.1; % Dalla tua analisi ROI
%upperThreshold = 0.25;
%disp('Applicazione thresholding 3D...');
%initialLiverMask_3D = (doubleStretchedSlice >= lowerThreshold) & (doubleStretchedSlice <= upperThreshold);

% --- Operazioni Morfologiche 3D ---
disp('Riempimento buchi 3D...');
% imfill funziona anche in 3D
filledVolume_3D = imfill(initialLiverMask, 'holes');

% (Opzionale) Apertura/Chiusura 3D - richiede elementi strutturanti 3D
se_3D = strel('sphere', 4); % Esempio: sfera di raggio 2
openedVolume_3D = imopen(filledVolume_3D, se_3D);
% cleanedVolume_3D = imclose(openedVolume_3D, se_3D); % Esempio

% --- Rimozione Oggetti Piccoli 3D ---
minLiverVolumeVoxels = 300000; % SOGLIA DI VOLUME IN VOXEL -> DA REGOLARE!
disp(['Rimozione oggetti 3D più piccoli di ', num2str(minLiverVolumeVoxels), ' voxels...']);
% Usa connettività 26 per considerare vicini diagonali in 3D
cleanedVolume_3D = bwareaopen(openedVolume_3D, minLiverVolumeVoxels, 18); 
                               % Usa filledVolume_3D o opened/closed se usati

% --- Trova Componenti Connesse 3D ---
disp('Ricerca componenti connesse 3D...');
CC_3D = bwconncomp(cleanedVolume_3D, 18); % Usa connettività 26

refinedLiverMask_3D = false(size(doubleStretchedSlice)); % Inizializza maschera finale

if CC_3D.NumObjects > 0
    disp('Selezione componente 3D più grande...');
    % Calcola il volume (numero di voxel) di ogni componente
    volumes = cellfun(@numel, CC_3D.PixelIdxList);
    % Trova l'indice della componente con il volume massimo
    [~, idxLargest] = max(volumes);

    % Crea la maschera finale solo con la componente più grande
    refinedLiverMask_3D(CC_3D.PixelIdxList{idxLargest}) = true;
    fprintf('Componente più grande selezionata (Volume: %d voxels).\n', volumes(idxLargest));
else
    disp('Nessuna componente trovata dopo la pulizia 3D.');
end

disp('Segmentazione 3D completata.');

for slice_to_show=1:nSlice
% slice_to_show = 180;
figure(121); clf;
subplot(1,2,1); imshow(doubleStretchedSlice(:,:,slice_to_show), []); title(['Slice Filtrata ', num2str(slice_to_show)]);
subplot(1,2,2); imshow(doubleStretchedSlice(:,:,slice_to_show), []); hold on;
visboundaries(refinedLiverMask_3D(:,:,slice_to_show),'Color','g', 'LineWidth', 1); hold off;
title(['Segmentazione Finale 3D (Slice ', num2str(slice_to_show), ')']);
pause(0.01);
end


%%
% --- INPUT INIZIALE: refinedLiverMask_3D ---
[nRows, nCols, nSlice] = size(refinedLiverMask_3D); % Ottieni dimensioni


% --- FASE 1: Applica criterio componente 2D più bassa e controllo metà inferiore ---
disp('FASE 1: Applicazione criterio componente 2D più bassa e controllo metà inferiore...');
maskAfterStage1 = false(size(refinedLiverMask_3D)); % Maschera INTERMEDIA dopo la fase 1

% Usa il tuo valore per definire la 'metà' inferiore (1.5 non è metà, ma rispetto la tua scelta)
startRowBottomHalf = floor(nRows / 1.5) + 1; 

for slice_idx = 1:nSlice
    currentSliceMask = refinedLiverMask_3D(:,:,slice_idx);

    % Salta se l'intera slice è vuota
    if ~any(currentSliceMask(:))
        continue; 
    end

    % Verifica se c'è almeno un pixel nella parte 'inferiore' definita
    bottomHalfMaskPortion = currentSliceMask(startRowBottomHalf:end, :); 
    if ~any(bottomHalfMaskPortion(:))
        continue; 
    end
    
    % Analisi componenti 2D
    CC_2D = bwconncomp(currentSliceMask, 8);

    % Se 0 o 1 componente, usa la maschera intera (soddisfa già i criteri)
    if CC_2D.NumObjects <= 1 
        maskAfterStage1(:,:,slice_idx) = currentSliceMask;
    else
        % Più componenti: trova quella che si estende più in basso
        maxRowOverall = -1;
        idxLowestComponent = -1;

        for k = 1:CC_2D.NumObjects
            [rows, ~] = ind2sub([nRows, nCols], CC_2D.PixelIdxList{k});
            if isempty(rows), continue; end % Salta componenti vuote (improbabile ma sicuro)
            currentComponentMaxRow = max(rows); 

            if currentComponentMaxRow > maxRowOverall
                maxRowOverall = currentComponentMaxRow;
                idxLowestComponent = k;
            end
        end
        
        % Crea maschera temporanea solo con la componente più bassa trovata
        tempSliceMask = false(nRows, nCols);
        if idxLowestComponent > 0 
             tempSliceMask(CC_2D.PixelIdxList{idxLowestComponent}) = true;
        end
        maskAfterStage1(:,:,slice_idx) = tempSliceMask; % Salva il risultato nella maschera intermedia
    end
end
disp('FASE 1: Completata. Maschera intermedia creata.');
% --- FINE FASE 1 ---


% --- FASE 2: Seleziona la Componente 3D Più Grande dalla Maschera Intermedia ---
disp('FASE 2: Ricerca della componente 3D più grande nella maschera intermedia (risultato Fase 1)...');

finalProcessedMask = false(size(maskAfterStage1)); % Inizializza maschera finale (output)

% Verifica se la maschera intermedia (output della Fase 1) contiene qualcosa
if ~any(maskAfterStage1(:))
    disp('La maschera intermedia (dopo Fase 1) è vuota. La maschera finale sarà vuota.');
else
    % Trova le componenti connesse 3D nella maschera risultante dalla Fase 1
    connectivity = 26; % Connettività 3D
    CC_3D_Stage2 = bwconncomp(maskAfterStage1, connectivity);
    
    % Controlla quante componenti sono rimaste dopo la Fase 1
    if CC_3D_Stage2.NumObjects == 0
        disp('Nessuna componente 3D trovata nella maschera intermedia. Maschera finale vuota.');
    elseif CC_3D_Stage2.NumObjects == 1
         disp('Trovata una sola componente 3D dopo la Fase 1. Verrà usata quella.');
         finalProcessedMask = maskAfterStage1; % È già la più grande
    else
        % Più componenti 3D rimaste: trova la più grande per volume
        disp(['Trovate ', num2str(CC_3D_Stage2.NumObjects), ' componenti 3D (dopo Fase 1). Ricerca della più grande...']);
        numVoxels = cellfun(@numel, CC_3D_Stage2.PixelIdxList);
        [maxSize, idxLargestComponent] = max(numVoxels); 
        fprintf('La componente più grande (dopo Fase 1) ha %d voxel (indice %d).\n', maxSize, idxLargestComponent);
        
        % Crea la maschera finale contenente solo la componente più grande trovata
        finalProcessedMask(CC_3D_Stage2.PixelIdxList{idxLargestComponent}) = true; 
    end
end

disp('FASE 2: Selezione della componente 3D più grande completata.');
% --- FINE FASE 2 ---


% --- Visualizzazione (usa la finalProcessedMask risultante dalla Fase 2) ---
disp('Visualizzazione maschera finale processata (dopo Fase 1 + Fase 2)...');
for slice_to_show=1:nSlice
    figure(121); clf; 
    subplot(1,2,1);
     if slice_to_show <= size(doubleStretchedSlice, 3)
        imshow(doubleStretchedSlice(:,:,slice_to_show), []);
        title(['Slice Filtrata ', num2str(slice_to_show)]);
     else
         title(['Slice Filtrata ', num2str(slice_to_show), ' (Dati non disp.)']);
     end

    subplot(1,2,2);
    if slice_to_show <= size(doubleStretchedSlice, 3)
        imshow(doubleStretchedSlice(:,:,slice_to_show), []);
    else
         imagesc(zeros(nRows, nCols)); 
         axis image; colormap gray;
    end
    hold on;
    % Usa la finalProcessedMask (output della Fase 2) per la visualizzazione
    visboundaries(finalProcessedMask(:,:,slice_to_show),'Color','m', 'LineWidth', 1); % Colore Magenta
    hold off;
    title(['Finale (LowestComp & Largest3D) (Slice ', num2str(slice_to_show), ')']);

    pause(0.01); 
end


%%
image_class = class(no_bones_slice); 
mask_casted = cast(finalProcessedMask, image_class);


sliceFinalMask = no_bones_slice .* mask_casted;

for i=1:nSlice
    figure(404); clf;
    imshow(sliceFinalMask(:,:,i))

    pause(0.001);
end

%%
[hMean_final, hMean_clean_final] = histogramOnAllSlices(sliceFinalMask, maxValue);

[grouped_hMean_final, grouped_hMean_clean_final, binCenters] = groupHistogramData(hMean_final, hMean_clean_final, groupSize, nBins);


[lowerIntensity_final, upperIntensity_final] = bandDetection(grouped_hMean_clean_final, 3000)

plotGroupedHistograms(binCenters, grouped_hMean_final, grouped_hMean_clean_final, nBins, 0.42, 0.55);


stetched_final = stretchSlices(no_bones_slice, 0.42, 0.55, 2);

%%

matchSlices = histogramMachingAllSlice(stetched_final, 150) .* mask_casted;

% gridSlices(stetched_final, 134,142)

%%

for i=1:nSlice
    figure(404); clf;
    subplot(1,2,1);
    imshow(matchSlices(:,:,i),[])
    title(i)
    subplot(1,2,2);
    imshow(labelVolume(:,:,i),[])
    pause(0.001);
end


%%
DoS = 0.04; % Regola questo (Degree of Smoothing)
sSigma = 7;

h = waitbar(0);
for slice_idx=1:nSlice
     waitbar(slice_idx/nSlice, h);
    % tempSlice = uint16(double(doubleStretchedSlice_final(:,:,slice_idx)) .* double(1 - mask_array(:,:,slice_idx)));
    % doubleStretchedSlice(:,:,slice_idx) = kuwahara(tempSlice, 19);
    matchSlices_filter(:,:,slice_idx) = imbilatfilt(double(double(matchSlices(:,:,slice_idx))./maxValue), DoS, sSigma);
end
%%
for i=1:nSlice
    figure(404); clf;
    subplot(1,2,1);
    imshow(matchSlices_filter(:,:,i),[])
    title(i)
    subplot(1,2,2);
    imshow(labelVolume(:,:,i),[])
    pause(0.001);
end


%%
slice_idx = 152;
slice = matchSlices_filter(:,:,slice_idx);
figure;
imshow(slice, []);
title('Disegna una ROI nel fegato');
roi = drawpolygon; % O drawpolygon, drawellipse...
wait(roi); % Attendi che l'utente finisca di disegnare
mask = createMask(roi);
liver_pixels = slice(mask); % Estrai i pixel della ROI
figure;
imhist(liver_pixels);
title('Istogramma della ROI nel fegato');


%%
disp('--- Inizio Segmentazione Tumori ---');

% --- Input per la segmentazione dei tumori ---
liverIntensityVolume = matchSlices_filter;     % Volume con intensità solo del fegato (già mascherato)
liverMaskVolume = finalProcessedMask; % Maschera binaria 3D del fegato

% --- Parametri per la segmentazione dei tumori (DA REGOLARE!) ---

% 1. Soglia di Intensità:
%    Identifica i pixel candidati ad essere tumore (più scuri).
%    Questo è il parametro PIÙ CRITICO. Ispeziona i valori in matchSlices(:,:,157)
%    nelle aree tumorali (cerchiate) e nel fegato sano circostante.
%    Scegli un valore che sia SOTTO l'intensità del fegato sano ma SOPRA
%    l'intensità dei tumori. Potrebbe richiedere prove.
%    ESEMPIO: Se i tumori hanno intensità ~5000 e il fegato ~15000,
%    una soglia potrebbe essere intorno a 8000-10000.
%    ATTENZIONE: I valori dipendono molto dal preprocessing fatto prima!
%    Guarda l'istogramma di liverIntensityVolume(liverMaskVolume) per aiutarti.
tumorIntensityThreshold_lower = 0.045; % VALORE PURAMENTE INDICATIVO - DA CAMBIARE!
tumorIntensityThreshold_upper = 0.175;

% 2. Dimensione Minima Oggetti (Pulizia):
%    Rimuove piccole regioni (rumore, vasi) dopo il thresholding.
%    Puoi specificare un'area minima per slice (2D) o un volume minimo (3D).
%    3D è generalmente più robusto.
minTumorVolumeVoxels = 5000; % Volume minimo in voxel per considerare una regione come tumore -> DA REGOLARE!

% 3. Elementi Strutturanti Morfologici (Opzionale, per pulizia):
se_open_tumor = strel('disk', 6); % Per rimuovere piccole connessioni/rumore (imopen)
se_close_tumor = strel('disk', 3);% Per chiudere piccoli buchi nei tumori (imclose)
% Per operazioni 3D, potresti usare: strel('sphere', 1) o strel('sphere', 2)

% --- Fase 1: Thresholding Iniziale ---
% Crea una maschera binaria iniziale: pixel nel fegato SOTTO la soglia
% Assicurati che liverIntensityVolume non sia vuoto o contenga solo zeri
initialTumorMask = false(size(liverIntensityVolume));
validLiverPixels = liverMaskVolume & (liverIntensityVolume > 0); % Pixel del fegato con intensità > 0
initialTumorMask(validLiverPixels) = (liverIntensityVolume(validLiverPixels) >= tumorIntensityThreshold_lower & liverIntensityVolume(validLiverPixels) <= tumorIntensityThreshold_upper);

disp('Thresholding iniziale per tumori completato.');

% --- Fase 2: Raffinamento Morfologico e Selezione Componenti (3D) ---
disp('Inizio raffinamento morfologico 3D e rimozione piccoli oggetti...');
tic;

% 1. (Opzionale) Apertura Morfologica 3D: Rimuove piccole protuberanze/rumore
%    Potrebbe rimuovere anche tumori molto piccoli se se_open_tumor è grande
openedMask_3D = imopen(initialTumorMask, strel('sphere', 5)); % Usa strel 3D
% Potresti preferire applicare l'apertura 2D slice-by-slice se la 3D è troppo aggressiva
% openedMask_3D = false(size(initialTumorMask));
for k=1:size(initialTumorMask, 3)
    openedMask_3D(:,:,k) = imopen(initialTumorMask(:,:,k), se_open_tumor);
end
currentMask = openedMask_3D; % Maschera da usare per i passi successivi

% 2. Rimuovi Oggetti Piccoli (Basato sul Volume 3D)
%    Questa è spesso la pulizia più efficace. Usa bwareaopen in modalità 3D.
%    La connettività 18 o 26 è comune per il 3D.
connectivity_3d = 18; % o 26
cleanedTumorMask_3D = bwareaopen(currentMask, minTumorVolumeVoxels, connectivity_3d);

% 3. (Opzionale) Chiusura Morfologica 3D: Riempie piccoli buchi interni
% closedMask_3D = imclose(cleanedTumorMask_3D, se_3D_tumor); % Usa strel 3D
% Oppure slice-by-slice:
closedMask_3D = false(size(cleanedTumorMask_3D));
for k=1:size(cleanedTumorMask_3D, 3)
     closedMask_3D(:,:,k) = imclose(cleanedTumorMask_3D(:,:,k), se_close_tumor);
     closedMask_3D(:,:,k) = imfill( closedMask_3D(:,:,k),"holes");
end
finalTumorMask = closedMask_3D; % Maschera finale dopo la pulizia

% 4. (Opzionale Extra) Riempimento Buchi Completo (se necessario)
finalTumorMask = imfill(finalTumorMask, 'holes'); % Funziona in 3D

elapsedTimeTumor = toc;
fprintf('Raffinamento morfologico 3D completato in %.2f secondi.\n', elapsedTimeTumor);

% --- Visualizzazione Finale Tumori ---
disp('Visualizzazione segmentazione finale tumori...');
for slice_idx = 1:size(liverIntensityVolume, 3)
    figure(500); clf; % Usa un nuovo numero di figura

    subplot(1,2,1);
    imshow(labelVolume(:,:,slice_idx), []);
    title(['Fegato Preprocessato (Slice ', num2str(slice_idx), ')']);

    subplot(1,2,2);
    imshow(liverIntensityVolume(:,:,slice_idx), []);
    hold on;
    % Mostra contorno fegato (verde) e tumori (rosso)
    visboundaries(liverMaskVolume(:,:,slice_idx), 'Color', 'g', 'LineWidth', 0.5, 'LineStyle', ':'); % Contorno fegato
    visboundaries(finalTumorMask(:,:,slice_idx), 'Color', 'r', 'LineWidth', 1); % Contorno tumori
    hold off;
    title(['Fegato (Verde) e Tumori Rilevati (Rosso) - Slice ', num2str(slice_idx)]);

    drawnow;
    pause(0.01); % Pausa per visualizzazione
end

disp('--- Fine Segmentazione Tumori ---');

% La variabile 'finalTumorMask' ora contiene la maschera 3D binaria
% delle masse tumorali identificate.

%%
% --- INIZIO CODICE VALUTAZIONE ---
% Qui finisce il tuo codice di segmentazione. Le variabili importanti sono:
% labelVolume: Ground Truth (0, 1, 2)
% liverMaskVolume: Predizione maschera Fegato (logica 0/1)
% finalTumorMask: Predizione maschera Tumore (logica 0/1)

disp('--- Inizio Calcolo Metriche di Valutazione ---'); %[output:32f16a00]

% --- Preparazione Maschere Predette (assicurati siano logiche) ---
liver_mask_pred = logical(liverMaskVolume);
tumor_mask_pred = logical(finalTumorMask);

% --- Preparazione Maschere Ground Truth ---
tumor_mask_gt = (labelVolume == 2);
liver_mask_gt = (labelVolume == 1) | tumor_mask_gt; % SOLO fegato GT

% --- 1. Calcolo Recall (Sensitivity) ---
%    (Questa parte usa le maschere predette separate ed è corretta)

fprintf('\n--- Recall (Sensitivity) ---\n'); %[output:9f020996]
% Valutazione Fegato (solo label 1)
tp_liver = sum(liver_mask_pred(:) & liver_mask_gt(:));
total_gt_liver = sum(liver_mask_gt(:));
if total_gt_liver > 0
    liver_recall = tp_liver / total_gt_liver;
else
    liver_recall = NaN; % O 1.0 se tp_liver è 0? Dipende da interpretazione
end
fprintf('Recall Fegato (TP / GT Fegato): %.4f  (TP=%d, Totale GT=%d)\n', liver_recall, tp_liver, total_gt_liver); %[output:536ade1e]

% Valutazione Tumore (label 2)
tp_tumor = sum(tumor_mask_pred(:) & tumor_mask_gt(:));
total_gt_tumor = sum(tumor_mask_gt(:));
if total_gt_tumor > 0
    tumor_recall = tp_tumor / total_gt_tumor;
else
    tumor_recall = NaN; % O 1.0 se tp_tumor è 0?
end
fprintf('Recall Tumore (TP / GT Tumore): %.4f  (TP=%d, Totale GT=%d)\n', tumor_recall, tp_tumor, total_gt_tumor); %[output:8a19abff]


% --- 2. Calcolo Dice Score (Metrica Standard) ---
%    (Questa parte richiede la costruzione di predictionVolume con etichette 0, 1, 2)

fprintf('\n--- Dice Score ---\n'); %[output:0e1010a9]
% COSTRUZIONE di predictionVolume dalle maschere predette:
predictionVolume = zeros(size(labelVolume), 'like', labelVolume); % Inizializza a 0 (background)
predictionVolume(liver_mask_pred) = 1; % Imposta fegato predetto a 1
predictionVolume(tumor_mask_pred) = 2; % Imposta tumore predetto a 2 (sovrascrive fegato se necessario)
disp('Volume di Predizione (0,1,2) costruito.'); %[output:785a786b]

% Ora puoi chiamare la funzione per il Dice Score
% Assicurati che la funzione sia nel path di MATLAB o nella stessa cartella
try %[output:group:3474c5ca]
    scores = calculateDiceScoresMATLAB(labelVolume, predictionVolume, [1, 2]); % Passa GT e Predizione (0,1,2)
    disp('Dice Scores calcolati:');
    disp(scores);

    % Calcolo opzionale dello score medio (ignorando NaN)
    all_scores = struct2array(scores);
    valid_scores = all_scores(~isnan(all_scores)); % Rimuove NaN
    if ~isempty(valid_scores)
        mean_dice = mean(valid_scores);
        fprintf('Mean Dice Score (su classi valide): %.4f\n', mean_dice);
    else
        disp('Nessuno score Dice valido calcolato per la media.');
    end

catch ME
    warning('Errore durante il calcolo del Dice Score. Assicurati che la funzione "calculateDiceScoresMATLAB" sia disponibile.'); %[output:52ecb8f3]
    disp(ME.message); %[output:10c0f0a1]
    scores = struct(); % Crea una struct vuota per evitare errori dopo
end %[output:group:3474c5ca]

disp('--- Fine Calcolo Metriche di Valutazione ---'); %[output:143b552d]


% --- Parte Grafica (già presente nel tuo codice) ---
% La visualizzazione che hai implementato alla fine della segmentazione
% mostra già l'overlay della maschera predetta (finalTumorMask in rosso)
% sull'immagine del fegato preprocessato, che è un ottimo modo per
% vedere graficamente il risultato della *tua segmentazione*.

% Se vuoi confrontare graficamente la TUA predizione (rossa) con il
% GROUND TRUTH (blu), puoi modificare quella visualizzazione:

disp('Visualizzazione comparativa GT vs Predizione (slice per slice)...'); %[output:11fa1453]
[row, col, nSlice] = size(labelVolume); % Prendi nSlice da labelVolume
for slice_idx = 1:nSlice % Usa nSlice corretto %[output:group:2ceb6021]
    figure(600); clf; % Usa un altro numero di figura per non sovrascrivere %[output:925ee163]

    imshow(liverIntensityVolume(:,:,slice_idx), []); % Mostra immagine base
    hold on;

    % Contorni Ground Truth (es. blu e ciano)
    visboundaries(tumor_mask_gt(:,:,slice_idx), 'Color', 'b', 'LineWidth', 1, 'LineStyle', '-'); % GT Tumore
    visboundaries(liver_mask_gt(:,:,slice_idx), 'Color', 'c', 'LineWidth', 0.5, 'LineStyle', '-'); % GT Fegato (solo label 1)

    % Contorni Predizione (es. rosso e giallo)
    visboundaries(tumor_mask_pred(:,:,slice_idx), 'Color', 'r', 'LineWidth', 1, 'LineStyle', '--'); % Predizione Tumore
    visboundaries(liver_mask_pred(:,:,slice_idx), 'Color', 'y', 'LineWidth', 0.5, 'LineStyle', '--'); % Predizione Fegato

    hold off;
    title(sprintf('Slice %d: GT (blu/ciano) vs Pred (rosso/giallo)', slice_idx));

    drawnow;
    pause(0.05); % Pausa leggermente più lunga per vedere
end %[output:group:2ceb6021]


%%
imshow(labelVolume(:,:,157)==1,[])

imshow(liver_mask_pred(:,:,157)==1,[])



%[appendix]
%---
%[metadata:view]
%   data: {"layout":"onright","rightPanelPercent":43.7}
%---
%[control:slider:431b]
%   data: {"defaultValue":0,"label":"lowerThreshold","max":0.2,"min":0,"run":"Section","runOn":"ValueChanging","step":0.01}
%---
%[control:slider:32e1]
%   data: {"defaultValue":0,"label":"upperThreshold","max":0.3,"min":0,"run":"Section","runOn":"ValueChanging","step":0.01}
%---
%[output:32f16a00]
%   data: {"dataType":"text","outputData":{"text":"--- Inizio Calcolo Metriche di Valutazione ---\n","truncated":false}}
%---
%[output:9f020996]
%   data: {"dataType":"text","outputData":{"text":"\n--- Recall (Sensitivity) ---\n","truncated":false}}
%---
%[output:536ade1e]
%   data: {"dataType":"text","outputData":{"text":"Recall Fegato (TP \/ GT Fegato): 0.9516  (TP=1412251, Totale GT=1484119)\n","truncated":false}}
%---
%[output:8a19abff]
%   data: {"dataType":"text","outputData":{"text":"Recall Tumore (TP \/ GT Tumore): 0.6020  (TP=53139, Totale GT=88269)\n","truncated":false}}
%---
%[output:0e1010a9]
%   data: {"dataType":"text","outputData":{"text":"\n--- Dice Score ---\n","truncated":false}}
%---
%[output:785a786b]
%   data: {"dataType":"text","outputData":{"text":"Volume di Predizione (0,1,2) costruito.\n","truncated":false}}
%---
%[output:52ecb8f3]
%   data: {"dataType":"warning","outputData":{"text":"Warning: Errore durante il calcolo del Dice Score. Assicurati che la funzione \"calculateDiceScoresMATLAB\" sia disponibile."}}
%---
%[output:10c0f0a1]
%   data: {"dataType":"text","outputData":{"text":"Undefined function 'calculateDiceScoresMATLAB' for input arguments of type 'uint8'.\n","truncated":false}}
%---
%[output:143b552d]
%   data: {"dataType":"text","outputData":{"text":"--- Fine Calcolo Metriche di Valutazione ---\n","truncated":false}}
%---
%[output:11fa1453]
%   data: {"dataType":"text","outputData":{"text":"Visualizzazione comparativa GT vs Predizione (slice per slice)...\n","truncated":false}}
%---
%[output:925ee163]
%   data: {"dataType":"image","outputData":{"dataUri":"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAABA4AAAOqCAYAAAAc9Bc2AAAAAXNSR0IArs4c6QAAIABJREFUeF7s3Qm0t91cPvBbJUsoXjImU8kQQhaJyFhJRaKUqZAMkaksyrRa5gaJRokUqQxRlLFSZIxKxoxJk1LmSuu617rfdRx73+d83\/d5etn781vL+tNzn3N++7Ov51n\/+\/p9933OdMopp3xq8SJAgAABAgQIECBAgAABAgQINATOpDiQCwIECBAgQIAAAQIECBAgQKAnoDiQDQIECBAgQIAAAQIECBAgQKAroDgQDgIECBAgQIAAAQIECBAgQEBxIAMECBAgQIAAAQIECBAgQIBAXcDEQd3MVxAgQIAAAQIECBAgQIAAgWkEFAfTbLWFEiBAgAABAgQIECBAgACBuoDioG7mKwgQIECAAAECBAgQIECAwDQCioNpttpCCRAgQIAAAQIECBAgQIBAXUBxUDfzFQQIECBAgAABAgQIECBAYBoBxcE0W22hBAgQIECAAAECBAgQIECgLqA4qJv5CgIECBAgQIAAAQIECBAgMI2A4mCarbZQAgQIECBAgAABAgQIECBQF1Ac1M18BQECBAgQIECAAAECBAgQmEZAcTDNVlsoAQIECBAgQIAAAQIECBCoCygO6ma+ggABAgQIECBAgAABAgQITCOgOJhmqy2UAAECBAgQIECAAAECBAjUBRQHdTNfQYAAAQIECBAgQIAAAQIEphFQHEyz1RZKgAABAgQIECBAgAABAgTqAoqDupmvIECAAAECBAgQIECAAAEC0wgoDqbZagslQIAAAQIECBAgQIAAAQJ1AcVB3cxXECBAgAABAgQIECBAgACBaQQUB9NstYUSIECAAAECBAgQIECAAIG6gOKgbuYrCBAgQIAAAQIECBAgQIDANAKKg2m22kIJECBAgAABAgQIECBAgEBdQHFQN\/MVBAgQIECAAAECBAgQIEBgGgHFwTRbbaEECBAgQIAAAQIECBAgQKAuoDiom\/kKAgQIECBAgAABAgQIECAwjYDiYJqttlACBAgQIECAAAECBAgQIFAXUBzUzXwFAQIECBAgQIAAAQIECBCYRkBxMM1WWygBAgQIECBAgAABAgQIEKgLKA7qZr6CAAECBAgQIECAAAECBAhMI6A4mGarLZQAAQIECBAgQIAAAQIECNQFFAd1M19BgAABAgQIECBAgAABAgSmEVAcTLPVFkqAAAECBAgQIECAAAECBOoCioO6ma8gQIDASRe44Q1vuNz85jdfLnaxiy2f+MQnlve9733Lb\/3Wby0vfOELT\/3ZL3rRi5Yv+qIvWq5\/\/esv\/\/Vf\/7U8+tGPXr7+679++dEf\/dHlT\/7kT07Ke\/zqr\/7q5Qd\/8AeXS13qUstHP\/rR9ec84QlPWD784Q9\/2s\/75m\/+5uUnfuInll\/7tV9bfumXfmn9sxvd6EbLAx7wgOb7+pVf+ZXlV3\/1V4\/9ns985jMv3\/M937Ou\/UIXutDy8Y9\/fPmHf\/iH5ZnPfObyvOc9b\/nUpz61XPKSl1x+\/dd\/ffd7fvd3f\/fyrne9q3lN1hXX+9znPkve32Uve9nlTne60\/JXf\/VXzetPq3\/2LF97hzvcYfnrv\/7r3ff7vd\/7vctd73rX5WlPe9rysz\/7s8f2Or0X3uMe91izlZ+fPP5\/vf74j\/94OfvZz37qj8vP\/tCHPrQk+4973OOW\/\/7v\/z6hb+W2t73tmu+DuW39gDve8Y7Ld3zHd6z\/+f\/0OK2Lzb8Tf\/RHf7T+XXzyk5985Lep5iz\/HsTsrW9963LrW996\/ffh4P8+8gcuy3JGZew47801BAgQILAsigMpIECAwGeZwDd90zctD3zgA9d3lcLgC77gC5bzne986\/\/+yZ\/8yeW5z33u+t8PFwf5mqte9arLQx\/60OUv\/uIvTviqzn\/+8y+\/8Ru\/sZztbGdb\/vZv\/3b50i\/90vU\/L33pS5f73e9+p\/68S1\/60stjH\/vY9Ybv4A3Y9a53veWe97znp72vL\/7iL14+\/\/M\/f3n4wx++PPvZzz7We05p8HM\/93PLFa5whfX6rbTI+8pru6n+8i\/\/8uVhD3vY+n\/7vM\/7vOWiF73o+t\/f+c53Lv\/7v\/+7\/vd73\/vey\/vf\/\/7P+LnXuc51Vuv8+ctf\/vKTWhykjEiBkRLkk5\/85K7Bd37ndy4\/8AM\/sDzrWc86tZA5FtrpvCgF1m\/+5m8uP\/\/zP79m4P\/rtRUH733ve1ebZCqZy+t3fud3lsc85jEn9K0cpzjI38Xf\/u3fXv8Tj8+FV\/5d+Jmf+Zklhccb3\/jGI99yNWcnojg4ozJ2JIYLCBAgQGAVUBwIAgECBD7LBH7hF35hvSl+yEMesvzhH\/7h+u62G5rc9OaT9rwOFwcnexn5JPGHfuiH1hv83Oh\/yZd8yfrfv\/ALv3C96c2n\/re\/\/e3Xm+CznOUs69vZ++T24he\/+PKkJz1pefWrX73c6173WqcEjvO6293uttzylrdcPvCBD6wFyxve8IblTGc603KTm9xkvdHP98m0Rm42t9c5z3nOUy2ve93rLh\/5yEd2f9QTn\/jEJUXJjW984+V\/\/ud\/TmpxkMmGfHKedX02v\/JJdfY8N5Un+pP+3rq34uA2t7nN8pa3vGW9LPn\/4R\/+4fWT\/m\/8xm88tQQ6EXbHKQ62\/H3f933f8va3v\/1E\/NiT\/j0yzZL3m+yfjL07EcVBEM6IjJ10fD+AAAECgwgoDgbZSMsgQGAcgXxaf5WrXGX53d\/93eWXf\/mXl\/\/4j\/9YjyRc8YpXXG+StmmC4xxVyA30d33Xd62f0v7Lv\/zLOq2Q8f3tJj3TDbe73e3Wm+R\/+qd\/Wp7xjGesn6S2XvlE8Cu\/8ivXceS\/\/\/u\/Xy\/5gz\/4g+Vc5zrXkqMJ+VQ\/xwTe9ra3rf\/J9+4VB7n2F3\/xF9fjBCkBMlmR193vfve1eMgY+lOf+tTPeBuZNsjPzCfP2zTAwYvyM\/\/1X\/91+Zu\/+ZtPKwcqxUEmE3IsJKVNypu8tqMKOR6QYyQpPbLGHDF405vetF5z+KjCto+5yX3Vq161XpPvm++fUfB3vOMda+mSm+PcMG1HNfLpcD4Z\/oqv+Ip1miL7ne+VHBweIY9jrs26sw+5\/hWveMXyUz\/1U+sxixwtSYaSlRh\/67d+61qyvPKVr1we9ahHnWqUyY98n2td61pL\/nveW3KSaZLtlcmI3MC33FN0pfBKWZO8ba\/s8eUvf\/l1DP0v\/\/Iv16\/Pe0ge8\/7yPmKatbVereLgAhe4wPJ7v\/d76+XJ3Vd91Vetn6Y\/\/\/nPX85znvOsY\/IZyU+Wj8r3t33bt63vKV8X53\/8x39cbnGLW3RzG7v8HUpJdtOb3nR9D3e+852XW93qVusefsM3fMOSrGWyJrm4xjWusf79usQlLrFab0d7tvVmj5OP\/D1IFuKXMu3FL37x+r2P+vNckyym0Puar\/ma9e\/g61\/\/+uXxj3\/8p5Ua+fuUV4655BWXlHzZh+QlX5P3sf19rebsOMXB6c3YOP\/CWwkBAgQ+NwUUB5+b++ZdEyAwsEBuPh7xiEesK8yn3bkByf\/nPjfMB8fqjyoO8gn8fe973+U\/\/\/M\/15u2y13ucst5z3ve9YY9Nydf93Vft95gpjDIDVyKiS\/7si9bb+Qy7n\/U69rXvvZ6FGC7WczNfEb8cwOXG6ncmPSKg22Nh8fNjyoOcpOY9x6XfNp81Gj\/toZKcZCy5Ud+5EfWIiDlTV5bcZDiJjd\/+X65UfvgBz+4Tje0njFxnOJgu+HOp9iZvMhN4HYGPUckcpOcsibFQ27sDt\/Qbf87e\/Da1752ufKVr7w+8+EpT3nKevO4FQfxSpmS75mJgYM5SBmT0iI\/J\/nKsyKythwhefCDH7zuZ165CU7Z8PSnP329UT\/8SmYucpGLLN\/\/\/d+\/Zna7wf\/nf\/7n9VkAKQxypCXPiMh7TR6\/9mu\/dnnZy162\/NiP\/Vgzbq3iILnKcY2UJLkBzprzflKG5f3\/+7\/\/+\/LIRz5yOeWUU3bznZ+dIy\/Z05e85CXr+80xm5QDvdzmRj62+bu3Pa9jKw7y8\/\/u7\/5ufR8pWZLP+MU+N+YXvOAF15+RwilryMREjpwkSylCMgmQv7MpCTP5kIJu788zgXHhC194fa85ppP\/nZ+dvyOxyZRBCr7sbxxTxKVEinuKlbyvrDvvK+tKcdErDo7K2VHFwYnK2FH\/JvlzAgQIEDh5AoqDk2frOxMgQOA0C+R5APmkMjeS2ys3GrnR354FcFRx8JznPGf9RHG7kcvEQD5xzE1obvJyE5Eby9xgvPnNb15vtHIDk5uvm93sZrvvPV+Xm7XcsOS4QB68dvCVG7u94iA3tbk5PXykIEcccpORtbYeOpdJjNyQ54b9W77lW9YfmRutWBx8Hb7xqxQHubnNJ9H5lDyFysHiYPu+ubnM+8jN50\/\/9E+vUxqnZeIgxz9ilSmGj33sY+uN5g1ucINTJy7yfIs8ayF7kiMN2ZeDD0fMjW5unHNzn4mS7eZ+uxnfioN82p1PyPNJd9aWNaYAyYM0c0N\/\/\/vff73Zz4MBU8Zsz3j4t3\/7t\/W4Rm6uUwokN6973evWT9kPv7ajLNszJrax\/xQhee\/xzKf5yW9uYlMoxC830vmkv\/U6+IyD3FjnqEQmK\/LKMxdy47+d38\/DOrO2lDh5HZXvlHMpsLYiLZ\/W54hKbrx7xUH26UEPetBa7mRNeW3FQY7MxC+v5COlU4qC2GaCILnODXtuspOVF7zgBesNfbKcPU5xlBv4fG1Kg+2Gv\/fnmXrIA0gzdXGwgMuxn+RkKze2DGyTLzlmlMmSvP+sI+uO1WUuc5lucXBUzo4qDk5Uxk7zP6i+kAABAgROt4Di4HQT+gYECBA4eQL59Dg3V3mGQG4QczOdTyVzQ7dXHOQTztyY5OYikwGtV35Dw\/ZAwcN\/nhuL3tPicyOSm+VMGORBea0HxO0VB5lqyBj5wRut4woe\/E0JWVfWl7IhN3x5pSg5xznO8Rk3fpXiYLuhTPGRT+nz2iYO7nKXu6yflue13RhvN23HKQ62T+W3owp5uF9uhvOz8sqNXD7538qewy6tp91f6UpXWq52tautnyTnBi8eGbvPuPx205ijB\/navLZyYbsmn\/Z\/+7d\/+2c8+HDLV44eZKIhxVKOohx8zsbB93fuc597LQVyo5sJg2QjxzJSDr3nPe9Z30uykk+280oZ8md\/9mdriZDnVbRerd+qkMIhxwXy\/VMmbMVBio+4ba+j8p2jGHl\/KegyKZDX9vyCXnGQYzSZijn4kMitONiKjHyfHH34\/d\/\/\/fV4Qp4rsL3ynIFkaDsGs2Utf54s5+9E1pZ1Z3rgqD\/P36P8fTqYl2Qgfx\/ilCIlP3M7zpL3sx2XObju\/Hn+d2\/iIO9vL2dHFQcnKmPH\/XfCdQQIECBw4gUUByfe1HckQIDAaRbIDW4+wc\/Nb84tb6P4+RQyEwS5Idk+CT9OcZCb\/9xgb880yKfzuXnI98v59dzE5fsd\/nWKuQnLKPPhV85q5yx7SoPcgORT99ZrrzjIqHzOyW+feFaw8ilsbshys92adPjxH\/\/xdRLh9EwcbDdr+fQ4N3J5bcXBwSmEHMfITeM2ut8rDg5+TSY68il0buIzRp5yJ+PomcDIaysODj79\/qxnPev6qy\/zOlwcbM8dyE14Jgiyt7kB\/PM\/\/\/P1gZNbcXDwpnr79Y9bcZCpg9zoH36uRK84yIRA1t56bQb5f7PHOZaQ97i9MvWS\/UnRkSwlhzkqk3KiVVS1jioc\/rlbcfCa17zm1DP8x8n3VmwcvIHePHvFwfZgxoPZ3YqDg79SNCVKCoCjioNMlKQUzN\/R3Jhvv3pyOyZz1J9vRdTBNWzFQVxTCCXP+XcjfyfzSl7zG0cOFmOH113N2VHFwYnMWOXfC9cSIECAwIkTUBycOEvfiQABAqdb4GBBkE8Nc\/Y8Y+I5C5+b9Nzob59WH\/eownbjmhu1nM\/Op+g5npBnBWQsexulzk1dbpZzs5dS4PArpUNubDMFsf1mhd6C94qDjGVnFP7gp\/fb98lNcj4xz41yPoFtvbYbtUxdZGw8I95xu\/rVr77erObX5Z2e4mD7dDQ3O7kZP1gcbOvOz8uYfKZAcp7+mc985mccVdgKiDwHIqVPPrFPSZDyY\/v0P5+25zkUf\/qnf7r+nO2oQj4NT0ETixyDyNdkwiE3mQePKmw31rlBzI1ijrjk13HmWQaxOE5xsB1daB1VyPdMqZDiaXto5Pa8hdbebM+9yHM1Un5ta8+1GfPP+8kIf6YW4pGb9xw9yGj99oDMg9+3Uhwcfl9H5XvLYY7\/5JP7vLbfaHLUUYXtOEa+ZsvjduQh\/7fkI1nJBEzrqEIyk+eWpERJObgdGUgBkBv6TCTk+MDen+fBnSnP8pyH1lGF2OXPMyWS75e85rUdVTiYsVhlf3sTB0fl7Kji4ERm7HT\/I+sbECBAgMBpElAcnCY2X0SAAIGTJ5Abgfx\/+PPKDVjOvm+\/u377lDh\/dlRxsH2yv41AZwQ+Ew3bp6Xbee18Kpobg9wEZ+w5n36nYDj82sast\/d18Ne65RPyg7\/+cK842D5Vz01RxtoPvo56OGKuzc10nq+QZyTklTPtuVHbjl3kf+cMfwqF7VU5qrA9VLL1cMQUGnkeRAqcnAnPcwUyip\/\/++GJg80gD+vLvqX8yZPl86lyioM8jDJTAdnvD33oQ+tbTbmTG7o8mDAFTj65zp7k4ZaxOfxJ8GaZT5Ezbp9PjlOcbJ++H6c4SCGUgio3jgcfjpiz7zlDn5H\/vLYjDtuDF1t\/A1Jw5IY5ZUByd6Mb3ejUaZbtGQgpCPI984DGrP1d73rXuq4UZIdfp6c4OCrfl73sZdeb80w6pMxIIXbNa15zPfPfKw628iTPLEghkFerOMj\/fbtZ3h6OmEmTPIgwDzFMOZCSLAVErHJjn5ImD1TMNED+\/qdY2PvzPFckecne5e\/EwYcj5u9Aji9kYiFHKO5zn\/usx0Ly2h4Kmf+enOQ3quTfl72HIx6Vs6OKgxOZsZP3L6\/vTIAAAQJ7AooD+SBAgMBnoUBu0nIzlQfS5YY4NxV5Ano+GcyNfl5HFQe5mc6Z7BQIGVXOTW4++c6N33Z0ITfJufHNTU1+jWE+Ec+nwNufH6TZxvVbXPk5uQHcXnvFQX47RG7ks8bDN4vHKQ7yM3KDmnXlQYK50cpac44+EwK5CTz86\/0qxUG+X27Ec9OaG+e8Dh5VSEmSG7aM7Oe3DKRIyOtwcZCbpRQYuRnNdESmC\/KbLHJUIHubXwOYKY\/cUB985ZpMhOTBmDlCkhu+lDmtX8eYiZFMLOShejnTnsmH3DDGNQ+kS1mUm+O9owr52bl5zbRJ3mvylmci5OZ5m4TINdueHjx60crC9pyAg7\/OcrsuWUvmcgOdm9s8aDFHJI56OGKscmPcem1HFVqTEEflO\/nJfubGOUVTypocEeoVB\/n5+TuUV4qBvHrFQf4skzXZ6+3XMeahlXk+wvYAx2QtX59fWZm8pFTJhMn2ANSj\/jw\/I8\/9yBpSpOXvQZ5vEtMchckkSiZn8gDFg38nko3kJH8vcmQpf\/dTDCYrmXQ6XFAdlbPkOGZ5qGPyfLhIONEZ+yz8J9tbIkCAwPACioPht9gCCRAgQKAqkBuofHK\/3RxWv37E6zOKn0+nczPemg4Ycc2tNW3PA8hviHj3u9\/9Obfs\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\/184d2zgMBEEQ\/BCUf5QKQaD9PALtcsrXGls71uCoIQHFwdCxH1ZVHMiBTxVkgAABAgQIECBAgACBWwHFgWBcAooDOVAcyAABAgQIECBAgAABAooDGTgKKA6EQ3EgAwQIECBAgAABAgQIKA5kQHEgA2cB\/3EgHQQIECBAgAABAgQI3An4VEEuLgEvDuTAiwMZIECAAAECBAgQIEDAiwMZ8OJABrw4kAECBAgQIECAAAECBJqAFwfN662\/9uLgrZcNe\/lUIWD5KQECBAgQIECAAIEhAcXB0LEfVlUcyIFPFWSAAAECBAgQIECAAIFbAcWBYFwCigM5UBzIAAECBAgQIECAAAECigMZOAooDoRDcSADBAgQIECAAAECBAgoDmRAcSADZwH\/cSAdBAgQIECAAAECBAjcCfhUQS4uAS8O5MCLAxkgQIAAAQIECBAgQMCLAxnw4kAGvDiQAQIECBAgQIAAAQIEmoAXB83rrb\/24uCtlw17+VQhYPkpAQIECBAgQIAAgSEBxcHQsR9WVRzIgU8VZIAAAQIECBAgQIAAgVsBxYFgXAKKAzlQHMgAAQIECBAgQIAAAQKKAxk4CigOhENxIAMECBAgQIAAAQIECCgOZEBxIANnAf9xIB0ECBAgQIAAAQIECNwJ+FRBLi4BLw7kwIsDGSBAgAABAgQIECBAwIsDGfDiQAa8OJABAgQIECBAgAABAgSagBcHzeutv\/bi4K2XDXv5VCFg+SkBAgQIECBAgACBIQHFwdCxH1ZVHMiBTxVkgAABAgQIECBAgACBWwHFgWBcAooDOVAcyAABAgQIECBAgAABAooDGTgKKA6EQ3EgAwQIECBAgAABAgQIKA5kQHEgA2cB\/3EgHQQIECBAgAABAgQI3An4VEEuLgEvDuTAiwMZIECAAAECBAgQIEDAiwMZ8OJABrw4kAECBAgQIECAAAECBJqAFwfN662\/9uLgrZcNe\/lUIWD5KQECBAgQIECAAIEhAcXB0LEfVlUcyMHf9\/ulQIAAAQIECBAgQIAAgX8Cn8+HCgH\/cSADBAgQIECAAAECBAgQIECAwFnAiwPpIECAAAECBAgQIECAAAECBI4CigPhIECAAAECBAgQIECAAAECBBQHMkCAAAECBAgQIECAAAECBAh0AS8OupkJAgQIECBAgAABAgQIECAwI6A4mDm1RQkQIECAAAECBAgQIECAQBdQHHQzEwQIECBAgAABAgQIECBAYEZAcTBzaosSIECAAAECBAgQIECAAIEuoDjoZiYIECBAgAABAgQIECBAgMCMgOJg5tQWJUCAAAECBAgQIECAAAECXUBx0M1MECBAgAABAgQIECBAgACBGQHFwcypLUqAAAECBAgQIECAAAECBLqA4qCbmSBAgAABAgQIECBAgAABAjMCioOZU1uUAAECBAgQIECAAAECBAh0AcVBNzNBgAABAgQIECBAgAABAgRmBBQHM6e2KAECBAgQIECAAAECBAgQ6AKKg25mggABAgQIECBAgAABAgQIzAgoDmZObVECBAgQIECAAAECBAgQINAFFAfdzAQBAgQIECBAgAABAgQIEJgRUBzMnNqiBAgQIECAAAECBAgQIECgCygOupkJAgQIECBAgAABAgQIECAwI6A4mDm1RQkQIECAAAECBAgQIECAQBdQHHQzEwQIECBAgAABAgQIECBAYEZAcTBzaosSIECAAAECBAgQIECAAIEuoDjoZiYIECBAgAABAgQIECBAgMCMgOJg5tQWJUCAAAECBAgQIECAAAECXUBx0M1MECBAgAABAgQIECBAgACBGQHFwcypLUqAAAECBAgQIECAAAECBLqA4qCbmSBAgAABAgQIECBAgAABAjMCioOZU1uUAAECBAgQIECAAAECBAh0AcVBNzNBgAABAgQIECBAgAABAgRmBBQHM6e2KAECBAgQIECAAAECBAgQ6AKKg25mggABAgQIECBAgAABAgQIzAgoDmZObVECBAgQIECAAAECBAgQINAFFAfdzAQBAgQIECBAgAABAgQIEJgRUBzMnNqiBAgQIECAAAECBAgQIECgCygOupkJAgQIECBAgAABAgQIECAwI6A4mDm1RQkQIECAAAECBAgQIECAQBdQHHQzEwQIECBAgAABAgQIECBAYEZAcTBzaosSIECAAAECBAgQIECAAIEuoDjoZiYIECBAgAABAgQIECBAgMCMgOJg5tQWJUCAAAECBAgQIECAAAECXUBx0M1MECBAgAABAgQIECBAgACBGQHFwcypLUqAAAECBAgQIECAAAECBLqA4qCbmSBAgAABAgQIECBAgAABAjMCioOZU1uUAAECBAgQIECAAAECBAh0AcVBNzNBgAABAgQIECBAgAABAgRmBBQHM6e2KAECBAgQIECAAAECBAgQ6AKKg25mggABAgQIECBAgAABAgQIzAgoDmZObVECBAgQIECAAAECBAgQINAFFAfdzAQBAgQIECBAgAABAgQIEJgRUBzMnNqiBAgQIECAAAECBAgQIECgCygOupkJAgQIECBAgAABAgQIECAwI6A4mDm1RQkQIECAAAECBAgQIECAQBdQHHQzEwQIECBAgAABAgQIECBAYEZAcTBzaosSIECAAAECBAgQIECAAIEuoDjoZiYIECBAgAABAgQIECBAgMCMgOJg5tQWJUCAAAECBAgQIECAAAECXUBx0M1MECBAgAABAgQIECBAgACBGQHFwcypLUqAAAECBAgQIECAAAECBLqA4qCbmSBAgAABAgQIECBAgAABAjMCioOZU1uUAAECBAgQIECAAAECBAh0AcVBNzNBgAABAgQIECBAgAABAgRmBBQHM6e2KAECBAgQIECAAAECBAgQ6AKKg25mggABAgQIECBAgAABAgQIzAgoDmZObVECBAgQIECAAAECBAgQINAFFAfdzAQBAgQIECBAgAABAgQIEJgRUBzMnNqiBAgQIECAAAECBAgQIECgCygOupkJAgQIECBAgAABAgQIECAwI6A4mDm1RQkQIECAAAECBAgQIECAQBdQHHQzEwQIECBAgAABAgQIECBAYEZAcTBzaosSIECAAAECBAgQIECAAIEuoDjoZiYIECBAgAABAgQIECBAgMCMgOJg5tQWJUCAAAECBAgQIECAAAECXUBx0M1MECBAgAABAgQIECBAgACBGQHFwcypLUqAAAECBAgQIECAAAECBLqA4qCbmSBAgAABAgQIECBAgAABAjMCioOZU1uUAAECBAgQIECAAAECBAh0AcVBNzNBgAABAgQIECBAgAABAgRmBBQHM6e2KAECBAgQIECAAAECBAgQ6AKKg25mggABAgQIECBAgAABAgQIzAgoDmZObVECBAgQIECAAAECBAgQINAFFAfdzAQBAgQIECBAgAABAgQIEJgRUBzMnNqiBAgQIECAAAECBAgQIECgCygOupkJAgQIECBAgAABAgQIECAwI6A4mDm1RQkQIECAAAECBAgQIECAQBdQHHQzEwQIECBAgAABAgQIECBAYEZAcTBzaosSIECAAAECBAgQIECAAIEuoDjoZiYIECBAgAABAgQIECBAgMCMgOJg5tQWJUCAAAECBAgQIECAAAECXUBx0M1MECBAgAABAgQIECBAgACBGQHFwcypLUqAAAECBAgQIECAAAECBLqA4qCbmSBAgAABAgQIECBAgAABAjMCioOZU1uUAAECBAgQIECAAAECBAh0AcVBNzNBgAABAgQIECBAgAABAgRmBBQHM6e2KAECBAgQIECAAAECBAgQ6AKKg25mggABAgQIECBAgAABAgQIzAgoDmZObVECBAgQIECAAAECBAgQINAFFAfdzAQBAgQIECBAgAABAgQIEJgRUBzMnNqiBAgQIECAAAECBAgQIECgCygOupkJAgQIECBAgAABAgQIECAwI6A4mDm1RQkQIECAAAECBAgQIECAQBdQHHQzEwQIECBAgAABAgQIECBAYEZAcTBzaosSIECAAAECBAgQIECAAIEuoDjoZiYIECBAgAABAgQIECBAgMCMgOJg5tQWJUCAAAECBAgQIECAAAECXUBx0M1MECBAgAABAgQIECBAgACBGYEffeiKclp5BUAAAAAASUVORK5CYII=","height":625,"width":692}}
%---
